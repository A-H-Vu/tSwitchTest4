<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.1.3">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'session': '001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1088, 614]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[-1.000,-1.000,-1.000]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="tSwitchTest4" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <ImageComponent name="trialGrid">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$gridImg" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="trialGrid" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="(gLoc1, gLoc2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="set every repeat" val="(gSize1, gSize2)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="trialShape">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$shapeStim" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="trialShape" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="(loc1, loc2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(0.2, 0.2)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'b','m'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrAns" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="False" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="trialText">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="trialText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.4, 0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="A" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="trialCode">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="trialText.text = trials.thisN.toString();&amp;#10;if ((trials.thisN === 0)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;if ((condsFile === &quot;tSwitchCond1.xlsx&quot;)) {&amp;#10;    gridImg = &quot;grid2a.png&quot;;&amp;#10;    gLoc1 = 0;&amp;#10;    gLoc2 = 0.12;&amp;#10;    gSize1 = 0.5;&amp;#10;    gSize2 = 0.25;&amp;#10;    if (((shapeStim === &quot;square2.png&quot;) || (shapeStim === &quot;square3.png&quot;))) {&amp;#10;        corrAns = &quot;b&quot;;&amp;#10;    } else {&amp;#10;        if (((shapeStim === &quot;diamond2.png&quot;) || (shapeStim === &quot;diamond3.png&quot;))) {&amp;#10;            corrAns = &quot;m&quot;;&amp;#10;        } else {&amp;#10;            corrAns = &quot;err&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;    if (((trials.thisN % 2) === 0)) {&amp;#10;        loc1 = (- 0.12);&amp;#10;        loc2 = 0.12;&amp;#10;    } else {&amp;#10;        if (((trials.thisN % 2) === 1)) {&amp;#10;            loc1 = 0.12;&amp;#10;            loc2 = 0.12;&amp;#10;        } else {&amp;#10;            loc1 = (- 0.12);&amp;#10;            loc2 = 0.12;&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((condsFile === &quot;tSwitchCond2.xlsx&quot;)) {&amp;#10;        gridImg = &quot;grid2a.png&quot;;&amp;#10;        gLoc1 = 0;&amp;#10;        gLoc2 = (- 0.12);&amp;#10;        gSize1 = 0.5;&amp;#10;        gSize2 = 0.25;&amp;#10;        if (((shapeStim === &quot;square2.png&quot;) || &quot;shapeStim == diamond2.png&quot;)) {&amp;#10;            corrAns = &quot;b&quot;;&amp;#10;        } else {&amp;#10;            if (((shapeStim === &quot;square3.png&quot;) || &quot;shapeStim == diamond3.png&quot;)) {&amp;#10;                corrAns = &quot;m&quot;;&amp;#10;            } else {&amp;#10;                corrAns = &quot;err&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;        if (((trials.thisN % 2) === 0)) {&amp;#10;            loc1 = (- 0.12);&amp;#10;            loc2 = (- 0.12);&amp;#10;        } else {&amp;#10;            if (((trials.thisN % 2) === 1)) {&amp;#10;                loc1 = 0.12;&amp;#10;                loc2 = (- 0.12);&amp;#10;            } else {&amp;#10;                loc1 = 0.12;&amp;#10;                loc2 = (- 0.12);&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((condsFile === &quot;tSwitchCond3.xlsx&quot;)) {&amp;#10;            gridImg = &quot;grid4a.png&quot;;&amp;#10;            gLoc1 = 0;&amp;#10;            gLoc2 = 0;&amp;#10;            gSize1 = 0.5;&amp;#10;            gSize2 = 0.5;&amp;#10;            if ((((shapeStim === &quot;square2.png&quot;) || (shapeStim === &quot;square3.png&quot;)) &amp;&amp; (loc2 === 0.12))) {&amp;#10;                corrAns = &quot;b&quot;;&amp;#10;            } else {&amp;#10;                if ((((shapeStim === &quot;diamond2.png&quot;) || (shapeStim === &quot;diamond3.png&quot;)) &amp;&amp; (loc2 === 0.12))) {&amp;#10;                    corrAns = &quot;m&quot;;&amp;#10;                } else {&amp;#10;                    if ((((shapeStim === &quot;square2.png&quot;) || (shapeStim === &quot;diamond2.png&quot;)) &amp;&amp; (loc2 === (- 0.12)))) {&amp;#10;                        corrAns = &quot;b&quot;;&amp;#10;                    } else {&amp;#10;                        if ((((shapeStim === &quot;square3.png&quot;) || (shapeStim === &quot;diamond3.png&quot;)) &amp;&amp; (loc2 === (- 0.12)))) {&amp;#10;                            corrAns = &quot;m&quot;;&amp;#10;                        } else {&amp;#10;                            corrAns = &quot;err&quot;;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;            if (((trials.thisN % 4) === 0)) {&amp;#10;                loc1 = (- 0.12);&amp;#10;                loc2 = 0.12;&amp;#10;            } else {&amp;#10;                if (((trials.thisN % 4) === 1)) {&amp;#10;                    loc1 = 0.12;&amp;#10;                    loc2 = 0.12;&amp;#10;                } else {&amp;#10;                    if (((trials.thisN % 4) === 2)) {&amp;#10;                        loc1 = 0.12;&amp;#10;                        loc2 = (- 0.12);&amp;#10;                    } else {&amp;#10;                        if (((trials.thisN % 4) === 3)) {&amp;#10;                            loc1 = (- 0.12);&amp;#10;                            loc2 = (- 0.12);&amp;#10;                        } else {&amp;#10;                            loc1 = 0.12;&amp;#10;                            loc2 = 0.12;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        } else {&amp;#10;            continueRoutine = false;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="trialText.text = str(trials.thisN)&amp;#10;&amp;#10;if trials.thisN == 0:&amp;#10;    continueRoutine = False &amp;#10;&amp;#10;if condsFile == &quot;tSwitchCond1.xlsx&quot;:&amp;#10;    gridImg = &quot;grid2a.png&quot;&amp;#10;    gLoc1 = 0&amp;#10;    gLoc2 = 0.12&amp;#10;    gSize1 = 0.5&amp;#10;    gSize2 = 0.25&amp;#10;    &amp;#10;    if (shapeStim == &quot;square2.png&quot; or shapeStim == &quot;square3.png&quot;):&amp;#10;        corrAns = &quot;b&quot;&amp;#10;    elif (shapeStim == &quot;diamond2.png&quot; or shapeStim == &quot;diamond3.png&quot;):&amp;#10;        corrAns = &quot;m&quot;&amp;#10;    else:&amp;#10;        corrAns = &quot;err&quot;&amp;#10;        &amp;#10;    if (trials.thisN % 2) == 0:&amp;#10;        loc1 = -0.12&amp;#10;        loc2 = 0.12&amp;#10;    elif (trials.thisN % 2) == 1:&amp;#10;        loc1 = 0.12&amp;#10;        loc2 = 0.12&amp;#10;    else:&amp;#10;        loc1 = -0.12&amp;#10;        loc2 = 0.12&amp;#10;elif condsFile == &quot;tSwitchCond2.xlsx&quot;:&amp;#10;    gridImg = &quot;grid2a.png&quot;&amp;#10;    gLoc1 = 0&amp;#10;    gLoc2 = -0.12&amp;#10;    gSize1 = 0.5&amp;#10;    gSize2 = 0.25&amp;#10;    &amp;#10;    if (shapeStim == &quot;square2.png&quot; or &quot;shapeStim == diamond2.png&quot;):&amp;#10;        corrAns = &quot;b&quot;&amp;#10;    elif (shapeStim == &quot;square3.png&quot; or &quot;shapeStim == diamond3.png&quot;):&amp;#10;        corrAns = &quot;m&quot;&amp;#10;    else:&amp;#10;        corrAns = &quot;err&quot;&amp;#10;&amp;#10;    if (trials.thisN % 2) == 0:&amp;#10;        loc1 = -0.12&amp;#10;        loc2 = -0.12&amp;#10;    elif (trials.thisN % 2) == 1:&amp;#10;        loc1 = 0.12&amp;#10;        loc2 = -0.12&amp;#10;    else:&amp;#10;        loc1 = 0.12&amp;#10;        loc2 = -0.12&amp;#10;elif condsFile == &quot;tSwitchCond3.xlsx&quot;:&amp;#10;    gridImg = &quot;grid4a.png&quot;&amp;#10;    gLoc1 = 0&amp;#10;    gLoc2 = 0&amp;#10;    gSize1 = 0.5&amp;#10;    gSize2 = 0.5&amp;#10;    &amp;#10;    if ((shapeStim == &quot;square2.png&quot; or shapeStim == &quot;square3.png&quot;) and loc2 == 0.12):&amp;#10;        corrAns = &quot;b&quot;&amp;#10;    elif ((shapeStim == &quot;diamond2.png&quot; or shapeStim == &quot;diamond3.png&quot;) and loc2 == 0.12):&amp;#10;        corrAns = &quot;m&quot;&amp;#10;    elif ((shapeStim == &quot;square2.png&quot; or shapeStim == &quot;diamond2.png&quot;) and loc2 == -0.12):&amp;#10;        corrAns = &quot;b&quot;&amp;#10;    elif ((shapeStim == &quot;square3.png&quot; or shapeStim == &quot;diamond3.png&quot;) and loc2 == -0.12):&amp;#10;        corrAns = &quot;m&quot;&amp;#10;    else:&amp;#10;        corrAns = &quot;err&quot;&amp;#10;    &amp;#10;    if (trials.thisN % 4) == 0:&amp;#10;        loc1 = -0.12&amp;#10;        loc2 = 0.12&amp;#10;    elif (trials.thisN % 4) == 1:&amp;#10;        loc1 = 0.12&amp;#10;        loc2 = 0.12&amp;#10;    elif (trials.thisN % 4) == 2:&amp;#10;        loc1 = 0.12&amp;#10;        loc2 = -0.12&amp;#10;    elif (trials.thisN % 4) == 3:&amp;#10;        loc1 = -0.12&amp;#10;        loc2 = -0.12&amp;#10;    else:&amp;#10;        loc1 = 0.12&amp;#10;        loc2 = 0.12&amp;#10;else:&amp;#10;    continueRoutine = False " valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if trials.thisN == 0:&amp;#10;    continueRoutine = False " valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if ((trials.thisN === 0)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="trialCode" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="setup">
      <CodeComponent name="setupCode">
        <Param name="Begin Experiment" updates="constant" val="loc1 = -0.12&amp;#10;loc2 = 0.12&amp;#10;gLoc1 = 0&amp;#10;gLoc2 = 0&amp;#10;gridImg = &quot;grid4a.png&quot;&amp;#10;gSize1 = 0.5&amp;#10;gSize2 = 0.5&amp;#10;corrAns = &quot;b&quot;&amp;#10;instrImage = &quot;instrImg1.png&quot;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="loc1 = (- 0.12);&amp;#10;loc2 = 0.12;&amp;#10;gLoc1 = 0;&amp;#10;gLoc2 = 0;&amp;#10;gridImg = &quot;grid4a.png&quot;;&amp;#10;gSize1 = 0.5;&amp;#10;gSize2 = 0.5;&amp;#10;corrAns = &quot;b&quot;;&amp;#10;instrImage = &quot;instrImg1.png&quot;;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="setupCode" valType="code"/>
      </CodeComponent>
      <CodeComponent name="JSCode">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="// Code to fix reference errors in JS&amp;#10;thisExp = psychoJS.experiment;&amp;#10;win = psychoJS.window;&amp;#10;event = psychoJS.eventManager;&amp;#10;Array.prototype.append = [].push;&amp;#10;shuffle = util.shuffle;&amp;#10;document.documentElement.style.cursor = 'none';&amp;#10;// Math related fixes&amp;#10;pi = Math.PI;&amp;#10;sin = Math.sin;&amp;#10;cos = Math.cos;&amp;#10;sqrt = Math.sqrt;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="document.documentElement.style.cursor = 'auto';" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="JSCode" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="instr">
      <TextComponent name="instrText">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="instrText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Space to continue." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="instrResp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="instrResp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="instrCode">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((condsFile === &quot;tSwitchCond1.xlsx&quot;)) {&amp;#10;    instrText.text = &quot;Press 'b' if you see a square. Press 'm' if you see a diamond. Press 'space' to continue&quot;;&amp;#10;} else {&amp;#10;    if ((condsFile === &quot;tSwitchCond2.xlsx&quot;)) {&amp;#10;        instrText.text = &quot;Press 'b' if you see two dots. Press 'm' if you see three dots. Press 'space' to continue&quot;;&amp;#10;    } else {&amp;#10;        if ((condsFile === &quot;tSwitchCond3.xlsx&quot;)) {&amp;#10;            instrText.text = &quot;IN THE TOP HALF:Press 'b' if you see a square. Press 'm' if you see a diamond. IN THE BOTTOM HALF: Press 'b' if you see two dots. Press 'm' if you see three dots. Press 'space' to continue.&quot;;&amp;#10;        } else {&amp;#10;            instrText.text = &quot;Press 'space' to continue&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if condsFile == &quot;tSwitchCond1.xlsx&quot;:&amp;#10;    instrText.text = &quot;Press 'b' if you see a square. Press 'm' if you see a diamond. Press 'space' to continue&quot;&amp;#10;elif condsFile == &quot;tSwitchCond2.xlsx&quot;:&amp;#10;    instrText.text = &quot;Press 'b' if you see two dots. Press 'm' if you see three dots. Press 'space' to continue&quot;&amp;#10;elif condsFile == &quot;tSwitchCond3.xlsx&quot;:&amp;#10;    instrText.text = &quot;IN THE TOP HALF:Press 'b' if you see a square. Press 'm' if you see a diamond. IN THE BOTTOM HALF: Press 'b' if you see two dots. Press 'm' if you see three dots. Press 'space' to continue.&quot;&amp;#10;else:&amp;#10;    instrText.text = &quot;Press 'space' to continue&quot;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="instrCode" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="end">
      <TextComponent name="endText">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="endText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="This is the end of the experiment. Thank you for your time. Please remember to return to the questionnaire to carry on with the study. Press ‘space’ to exit." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="endResp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="endResp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="setup"/>
    <LoopInitiator loopType="TrialHandler" name="taskLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('condsFile', 'tSwitchCond1.xlsx')]), OrderedDict([('condsFile', 'tSwitchCond2.xlsx')]), OrderedDict([('condsFile', 'tSwitchCond3.xlsx')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="taskCond.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="taskLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="instr"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$condsFile" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="fullRandom" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
    <LoopTerminator name="taskLoop"/>
    <Routine name="end"/>
  </Flow>
</PsychoPy2experiment>
